
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$WordTogether-primary: mat.define-palette(mat.$indigo-palette);
$WordTogether-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$WordTogether-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$WordTogether-theme: mat.define-light-theme((
  color: (
    primary: $WordTogether-primary,
    accent: $WordTogether-accent,
    warn: $WordTogether-warn,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($WordTogether-theme);

@import '../node_modules/@syncfusion/ej2-material-theme/styles/material.css';
/* You can add global styles to this file, and also import other style files */
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap');

:root{
  /* color*/
  --main-color:#264653;
  --secondary-color:#2A9D8F;
  --yellow-color:#E9C46A;
  --orange-color:#F4A261;
  --red-color:#E76F51;
  --gray:#808080;
  --page-header:#F1F3F4;
  /* font */
  --main-font: 'Montserrat', sans-serif;
  --big-text: 2em;
  --normal-text:1em;
  /* border radius */
  --button-radius:10px;
  --circle-radius:50%;
  --card-radius:10px;
  --input-radius:10px;

}
/* css reset*/
body,html{
  margin:0;
  padding:0;

}

*{
  font-family:var(--main-font);
  box-sizing: border-box;
}
.title{
  font-size:var(--big-text);

}

/* Importing Bootstrap SCSS file. */
@import 'bootstrap/scss/bootstrap';

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }
.example-container {
  display: flex;
  flex-direction: column;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}

.example-is-mobile .example-toolbar {
  position: fixed;
  /* Make sure the toolbar will stay on top of the content as it scrolls past. */
  z-index: 2;
}

h1.example-app-name {
  margin-left: 8px;
}

.sidenav-container {
  /* When the sidenav is not fixed, stretch the sidenav container to fill the available space. This
     causes `<mat-sidenav-content>` to act as our scrolling element for desktop layouts. */
  flex: 1;
}

.example-is-mobile .sidenav-container {
  /* When the sidenav is fixed, don't constrain the height of the sidenav container. This allows the
     `<body>` to be our scrolling element for mobile layouts. */
  flex: 1 0 auto;
}
